function [Pre Post] = Reactivation_ripples(path,Mode)
% This function calculates the Pre and Post sleep assemblies rate.
%
% INPUTS
% path: cell, inside each cell you should put the path of each session you
%       want to analyze
%
% Mode: String, define how you will construct the graph.
%       If 'CCG'     --> Cross-correlogram
%       If 'Average' --> Average activity
%
% OUTPUT
% Pre and Post: Structure, it store the Assemblies Rate for each type of
%               assemblies.
%
%               Architecture of each output:
%                   Pre.dHPC
%                      .vHPC.aversive
%                           .reward
%                   Post.dHPC
%                       .vHPC.aversive
%                            .reward
%
% Morci Juan Facundo 04/2024

%variables to use in the script
criteria_fr = 0;
th = 2; % threshold for detecting peak assemblies
% 3 SD funciona

% Variables to construct the PHIT
d = 2;         % total time window
b = 0.01;      % time bin
sm = 2;        % smooth factor
mode = 'Gain'; % type of normalization



% storage variables
Pre.dHPC.aversive = []; Pre.vHPC.aversive = [];
Post.dHPC.aversive = []; Post.vHPC.aversive = [];
Pre.dHPC.reward = []; Pre.vHPC.reward = [];
Post.dHPC.reward = []; Post.vHPC.reward = [];

%% Main loop, to iterate across sessions
for tt = 1:length(path)
    %List of folders from the path
    files = dir(path{tt});
    % Get a logical vector that tells which is a directory.
    dirFlags = [files.isdir];
    % Extract only those that are directories.
    subFolders = files(dirFlags);
    clear files dirFlags
    for t = 1 : length(subFolders)-2
        disp(['-- Initiating analysis of folder #' , num2str(t) , ' from rat #',num2str(tt) , ' --'])
        session = [subFolders(t+2).folder,'\',subFolders(t+2).name];
        cd(session)
        
        %Loading TS of the sessions
        disp('Uploading session time stamps')
        load('session_organization.mat')
        
        %% load sleep states
        disp('Uploading sleep scoring')
        x = dir([cd,'\*-states.mat']);    states = load([cd,'\',x.name]);    states = states.states;
        REM.all = ToIntervals(states==5);    NREM.all = ToIntervals(states==3);
        clear x states
        
        NREM.baseline = Restrict(NREM.all,baselineTS./1000);
        NREM.aversive = Restrict(NREM.all,aversiveTS./1000);
        NREM.reward = Restrict(NREM.all,rewardTS./1000);
        
        REM.baseline = Restrict(REM.all,baselineTS./1000);
        REM.aversive = Restrict(REM.all,aversiveTS./1000);
        REM.reward = Restrict(REM.all,rewardTS./1000);
        
        
        %% Load ripples
        if exist('ripplesD_customized2.csv')
            ripplesD = table2array(readtable('ripplesD_customized2.csv'));
            RD = true;
        else
            RD = false;
        end
        
        if exist('ripplesV_customized2.csv')
            ripplesV = table2array(readtable('ripplesV_customized2.csv'));
            RV = true;
        else
            RV = false;
        end
        
        if and(RV, RD)
            % coordination
            coordinated = [];
            coordinatedV = [];
            coordinated_event = [];
            for i = 1:length(ripplesD)
                r = ripplesD(i,:);
                tmp = sum(and(ripplesV(:,2)>= r(1,2)-0.1, ripplesV(:,2)<= r(1,2)+0.1));
                if tmp>0
                    z = ripplesV(and(ripplesV(:,2)>= r(1,2)-0.1, ripplesV(:,2)<= r(1,2)+0.1),:);
                    coordinatedV = [coordinatedV ; z];
                    [p,indice] = min(abs(r(2)-z(:,2)));
                    coordinated = [coordinated ; r];
                    coordinated_event = [coordinated_event ; min([r(1) , z(indice,1)]) , min(min(z(indice,2),r(2)))+abs(z(indice,2)-r(2))/2 , max([r(3) , z(indice,3)])];
                    
                    clear tmp2 tmp1 p indice z
                end
                clear r
            end
            clear x tmp i
            
            % Store events time stamps
            % dRipples
            ripples.dHPC.all = ripplesD;
            
            % vRipples
            ripples.vHPC.all = ripplesV;
            
            % coordinated dRipples
            ripples.dHPC.coordinated = coordinated;
            
            % coordinated vRipples
            [C ia ic] = unique(coordinatedV(:,2));
            ripples.vHPC.coordinated = (coordinatedV(ia,:)); clear C ia ic
            
            % cooridnated events
            ripples.coordinated = coordinated_event;
            
            clear ripplesD ripplesV coordinated coordinatedV coordinated_event
            %% Spikes
            % Load Units
            disp('Uploading Spiking activity')
            cd 'Spikesorting'
            spks = double([readNPY('spike_clusters.npy') readNPY('spike_times.npy')]);
            K = tdfread('cluster_group.tsv'); % import clusters ID and groups (MUA,Noise,Good)
            Kinfo = tdfread('cluster_info.tsv'); % import information of clusters
            K = [K.cluster_id(K.group(:,1) == 'g') , Kinfo.ch(K.group(:,1) == 'g'),]; % defining good clusters
            % Load neuronal classification
            load('Cell_type_classification')
            K = [K , Cell_type_classification(:,6:8)];
            group_dHPC = K(K(:,2) > 63,:);
            group_vHPC = K(K(:,2) <= 63,:);
            
            %Loop to select dorsal or ventral LFP and SU
            % z=1 --> dorsal
            % z=2 --> ventral
            for z = 1:2
                if z == 1
                    spks_dHPC = spks(ismember(spks(:,1),group_dHPC(:,1)),:); %keep spks from good clusters
                else
                    spks_vHPC = spks(ismember(spks(:,1),group_vHPC(:,1)),:); %keep spks from good clusters
                end
            end
            clear z
            spks_vHPC(:,2) = double(spks_vHPC(:,2))./20000;
            spks_dHPC(:,2) = double(spks_dHPC(:,2))./20000;
            spks(:,2) = double(spks(:,2))./20000;
            
            % Selection of celltype to analyze
            % pyr
            cellulartype = [K(:,1) , K(:,4)];
            
            %% Counting the Number f SU
            numberD = 0;
            clusters.all = [];
            clusters.dHPC = [];
            for ii=1:size(group_dHPC,1)
                cluster = group_dHPC(ii,1);
                Cellulartype = logical(cellulartype(cellulartype(:,1) == cluster,2));
                if Cellulartype
                    a = length(Restrict(spks(spks(:,1)==cluster,2),aversiveTS_run./1000)) / ((aversiveTS_run(2)-aversiveTS_run(1))/1000);
                    r = length(Restrict(spks(spks(:,1)==cluster,2),rewardTS_run./1000)) / ((rewardTS_run(2)-rewardTS_run(1))/1000);
                    if or(a > criteria_fr ,  r > criteria_fr)
                        numberD = numberD+1;
                        clusters.all = [clusters.all ; cluster];
                        clusters.dHPC = [clusters.dHPC ; cluster];
                    end
                end
                clear tmp cluster Cellulartype fr1 fr2 fr3 fr4 fr5 r a
            end
            
            numberV = 0;
            clusters.vHPC = [];
            for ii=1:size(group_vHPC,1)
                cluster = group_vHPC(ii,1);
                Cellulartype = logical(cellulartype(cellulartype(:,1) == cluster,2));
                if Cellulartype
                    a = length(Restrict(spks(spks(:,1)==cluster,2),aversiveTS_run./1000)) / ((aversiveTS_run(2)-aversiveTS_run(1))/1000);
                    r = length(Restrict(spks(spks(:,1)==cluster,2),rewardTS_run./1000)) / ((rewardTS_run(2)-rewardTS_run(1))/1000);
                    if or(a > criteria_fr ,  r > criteria_fr)
                        numberV = numberV+1;
                        clusters.all = [clusters.all ; cluster];
                        clusters.vHPC = [clusters.vHPC ; cluster];
                    end
                end
                clear tmp cluster Cellulartype fr1 fr2 fr3 fr4 fr5 r a
            end
            clear freq limits
            clear camara shock rightvalve leftvalve
            clear ejeX ejeY dX dY dX_int dY_int
            
            %% Assemblies detection
            if and(numberD > 3 , numberV > 3)
                % --- Aversive ---
                disp('Lets go for the assemblies')
                if isfile('separated_assemblies.mat')
                    load('separated_assemblies.mat')
                end
                
                % Definition of limits for assemblie activity strength
                limits = [0 segments.Var1(end)/1000];
                events = [];
                
                % Spiketrains construction
                [SpksTrains.dHPC , Bins , Cluster] = spike_train_construction(spks_dHPC, clusters.dHPC, cellulartype, 0.005, limits, events, false,true);
                [SpksTrains.vHPC , Bins , Cluster] = spike_train_construction(spks_vHPC, clusters.vHPC, cellulartype, 0.005, limits, events, false,true);
                
                if strcmp(Mode,'CCG')
                    if isfield(patterns,'aversive') %checking if there are aversive assemblies
                        if aversiveTS_run(1)<rewardTS_run(1)
                            TS.pre.sleep = NREM.baseline;
                            TS.post.sleep = NREM.aversive;
                            TS.pre.dRipples = Restrict(ripples.dHPC.coordinated,[NREM.baseline]);
                            TS.post.dRipples = Restrict(ripples.dHPC.coordinated,[NREM.aversive(1,1) NREM.aversive(1,1)]);
                            TS.pre.vRipples = Restrict(ripples.vHPC.coordinated,[NREM.baseline(end,2) NREM.baseline(end,2)]);
                            TS.post.vRipples = Restrict(ripples.vHPC.coordinated,[NREM.aversive(1,1) NREM.aversive(1,1)]);
                        else
                            TS.pre.sleep = Restrict(NREM.reward,[NREM.reward(end,2) NREM.reward(end,2)]);
                            TS.post.sleep = Restrict(NREM.aversive,[NREM.aversive(end,2) NREM.aversive(end,2)]);
                            TS.pre.dRipples = Restrict(ripples.dHPC.coordinated,[NREM.reward(end,2) NREM.reward(end,2)]);
                            TS.post.dRipples = Restrict(ripples.dHPC.coordinated,[NREM.aversive(1,1) NREM.aversive(1,1)]);
                            TS.pre.vRipples = Restrict(ripples.vHPC.coordinated,[NREM.reward(end,2) NREM.reward(end,2)]);
                            TS.post.vRipples = Restrict(ripples.vHPC.coordinated,[NREM.aversive(1,1) NREM.aversive(1,1)]);
                        end
                        
                        pks.vHPC.aversive = assemblies_peaks([Bins' SpksTrains.vHPC] , patterns.aversive.vHPC , th);
                        pks.dHPC.aversive = assemblies_peaks([Bins' SpksTrains.dHPC] , patterns.aversive.dHPC , th);
                        
                        for i = 1 : size(pks.vHPC.aversive,1)
                            r = [ripples.dHPC.all ; ripples.vHPC.all];
                            baseline = SubtractIntervals(NREM.all , [r(:,1)-0.05 r(:,3)+0.05]);
                            [p , t] = PHIST(TS.pre.dRipples(:,2),pks.vHPC.aversive{i}(:,1),baseline,d,b,sm,mode);
                            Pre.vHPC.aversive = [Pre.vHPC.aversive , p]; clear p t
                            
                            [p , t] = PHIST(TS.post.dRipples(:,2),pks.vHPC.aversive{i}(:,1),baseline,d,b,sm,mode);
                            Post.vHPC.aversive = [Post.vHPC.aversive , p]; clear p
                        end
                        
                        
                        for i = 1 : size(pks.dHPC.aversive,1)
                            r = [ripples.dHPC.all ; ripples.vHPC.all];
                            baseline = SubtractIntervals(NREM.all , [r(:,1)-0.05 r(:,3)+0.05]);
                            [p , t] = PHIST(TS.pre.vRipples(:,2),pks.dHPC.aversive{i}(:,1),baseline,d,b,sm,mode);
                            Pre.dHPC.aversive = [Pre.dHPC.aversive , p]; clear p t
                            
                            [p , t] = PHIST(TS.post.vRipples(:,2),pks.dHPC.aversive{i}(:,1),baseline,d,b,sm,mode);
                            Post.dHPC.aversive = [Post.dHPC.aversive , p]; clear p
                        end
                    end
                    
                    
                    if isfield(patterns,'reward') %checking if there are reward assemblies
                        if aversiveTS_run(1)<rewardTS_run(1)
                            TS.pre.sleep = Restrict(NREM.aversive,[NREM.aversive(end,2) NREM.aversive(end,2)]);
                            TS.post.sleep = Restrict(NREM.reward,[NREM.reward(end,2) NREM.reward(end,2)]);
                            TS.pre.dRipples = Restrict(ripples.dHPC.coordinated,[NREM.aversive(end,2) NREM.aversive(end,2)]);
                            TS.post.dRipples = Restrict(ripples.dHPC.coordinated,[NREM.reward(1,1) NREM.reward(1,1)]);
                            TS.pre.vRipples = Restrict(ripples.vHPC.coordinated,[NREM.aversive(end,2) NREM.aversive(end,2)]);
                            TS.post.vRipples = Restrict(ripples.vHPC.coordinated,[NREM.reward(1,1) NREM.reward(1,1)]);
                        else
                            TS.pre.sleep = Restrict(NREM.baseline,[NREM.baseline(end,2) NREM.baseline(end,2)]);
                            TS.post.sleep = Restrict(NREM.reward,[NREM.reward(end,2) NREM.reward(end,2)]);
                            TS.pre.dRipples = Restrict(ripples.dHPC.coordinated,[NREM.baseline(end,2) NREM.baseline(end,2)]);
                            TS.post.dRipples = Restrict(ripples.dHPC.coordinated,[NREM.reward(1,1) NREM.reward(1,1)]);
                            TS.pre.vRipples = Restrict(ripples.vHPC.coordinated,[NREM.baseline(end,2) NREM.baseline(end,2)]);
                            TS.post.vRipples = Restrict(ripples.vHPC.coordinated,[NREM.reward(1,1) NREM.reward(1,1)]);
                        end
                        
                        
                        pks.vHPC.reward = assemblies_peaks([Bins' SpksTrains.vHPC] , patterns.reward.vHPC , th);
                        pks.dHPC.reward = assemblies_peaks([Bins' SpksTrains.dHPC] , patterns.reward.dHPC , th);
                        
                        for i = 1 : size(pks.vHPC.reward,1)
                            r = [ripples.dHPC.all ; ripples.vHPC.all];
                            baseline = SubtractIntervals(NREM.all , [r(:,1)-0.05 r(:,3)+0.05]);
                            [p , t] = PHIST(TS.pre.dRipples(:,2),pks.vHPC.reward{i}(:,1),baseline,d,b,sm,mode);
                            Pre.vHPC.reward = [Pre.vHPC.reward , p]; clear p t
                            
                            [p , t] = PHIST(TS.post.dRipples(:,2),pks.vHPC.reward{i}(:,1),baseline,d,b,sm,mode);
                            Post.vHPC.reward = [Post.vHPC.reward , p]; clear p
                        end
                        
                        
                        for i = 1 : size(pks.dHPC.reward,1)
                            r = [ripples.dHPC.all ; ripples.vHPC.all];
                            baseline = SubtractIntervals(NREM.all , [r(:,1)-0.05 r(:,3)+0.05]);
                            [p , t] = PHIST(TS.pre.vRipples(:,2),pks.dHPC.reward{i}(:,1),baseline,d,b,sm,mode);
                            Pre.dHPC.reward = [Pre.dHPC.reward , p]; clear p t
                            
                            [p , t] = PHIST(TS.post.vRipples(:,2),pks.dHPC.reward{i}(:,1),baseline,d,b,sm,mode);
                            Post.dHPC.reward = [Post.dHPC.reward , p]; clear p
                        end
                    end
                end
                
                if strcmp(Mode,'Average')                
                    if isfield(patterns,'aversive') %checking if there are aversive assemblies
                        if aversiveTS_run(1)<rewardTS_run(1)
                            TS.pre.sleep = Restrict(NREM.baseline,[NREM.baseline(end,2) NREM.baseline(end,2)]);
                            TS.post.sleep = Restrict(NREM.aversive,[NREM.aversive(end,2) NREM.aversive(end,2)]);
                            TS.pre.dRipples = Restrict(ripples.dHPC.coordinated,[NREM.baseline(end,2) NREM.baseline(end,2)]);
                            TS.post.dRipples = Restrict(ripples.dHPC.coordinated,[NREM.aversive(1,1) NREM.aversive(1,1)]);
                            TS.pre.vRipples = Restrict(ripples.vHPC.coordinated,[NREM.baseline(end,2) NREM.baseline(end,2)]);
                            TS.post.vRipples = Restrict(ripples.vHPC.coordinated,[NREM.aversive(1,1) NREM.aversive(1,1)]);
                        else
                            TS.pre.sleep = Restrict(NREM.reward,[NREM.reward(end,2) NREM.reward(end,2)]);
                            TS.post.sleep = Restrict(NREM.aversive,[NREM.aversive(end,2) NREM.aversive(end,2)]);
                            TS.pre.dRipples = Restrict(ripples.dHPC.coordinated,[NREM.reward(end,2) NREM.reward(end,2)]);
                            TS.post.dRipples = Restrict(ripples.dHPC.coordinated,[NREM.aversive(1,1) NREM.aversive(1,1)]);
                            TS.pre.vRipples = Restrict(ripples.vHPC.coordinated,[NREM.reward(end,2) NREM.reward(end,2)]);
                            TS.post.vRipples = Restrict(ripples.vHPC.coordinated,[NREM.aversive(1,1) NREM.aversive(1,1)]);
                        end
                            cond = logical(ones(1,size(patterns.aversive.vHPC,2)));
                            [p , time] = triggered_average_Ripples(TS.pre.dRipples,patterns.aversive.vHPC,cond,[Bins' SpksTrains.vHPC],[-1 1]);
                            Pre.vHPC.aversive = [Pre.vHPC.aversive , p]; clear p t
                            
                            cond = logical(ones(1,size(patterns.aversive.vHPC,2)));
                            [p , time] = triggered_average_Ripples(TS.post.dRipples,patterns.aversive.vHPC,cond,[Bins' SpksTrains.vHPC],[-1 1]);
                            Post.vHPC.aversive = [Post.vHPC.aversive , p]; clear p
                        
                            cond = logical(ones(1,size(patterns.aversive.dHPC,2)));
                            [p , time] = triggered_average_Ripples(TS.pre.vRipples,patterns.aversive.dHPC,cond,[Bins' SpksTrains.dHPC],[-1 1]);
                            Pre.dHPC.aversive = [Pre.dHPC.aversive , p]; clear p t
                            
                            cond = logical(ones(1,size(patterns.aversive.dHPC,2)));
                            [p , time] = triggered_average_Ripples(TS.post.vRipples,patterns.aversive.dHPC,cond,[Bins' SpksTrains.dHPC],[-1 1]);
                            Post.dHPC.aversive = [Post.dHPC.aversive , p]; clear p
                    end
                    
                    
                    if isfield(patterns,'reward') %checking if there are reward assemblies
                        if aversiveTS_run(1)<rewardTS_run(1)
                            TS.pre.sleep = Restrict(NREM.aversive,[NREM.aversive(end,2) NREM.aversive(end,2)]);
                            TS.post.sleep = Restrict(NREM.reward,[NREM.reward(end,2) NREM.reward(end,2)]);
                            TS.pre.dRipples = Restrict(ripples.dHPC.coordinated,[NREM.aversive(end,2) NREM.aversive(end,2)]);
                            TS.post.dRipples = Restrict(ripples.dHPC.coordinated,[NREM.reward(1,1) NREM.reward(1,1)]);
                            TS.pre.vRipples = Restrict(ripples.vHPC.coordinated,[NREM.aversive(end,2) NREM.aversive(end,2)]);
                            TS.post.vRipples = Restrict(ripples.vHPC.coordinated,[NREM.reward(1,1) NREM.reward(1,1)]);
                        else
                            TS.pre.sleep = Restrict(NREM.baseline,[NREM.baseline(end,2) NREM.baseline(end,2)]);
                            TS.post.sleep = Restrict(NREM.reward,[NREM.reward(end,2) NREM.reward(end,2)]);
                            TS.pre.dRipples = Restrict(ripples.dHPC.coordinated,[NREM.baseline(end,2) NREM.baseline(end,2)]);
                            TS.post.dRipples = Restrict(ripples.dHPC.coordinated,[NREM.reward(1,1) NREM.reward(1,1)]);
                            TS.pre.vRipples = Restrict(ripples.vHPC.coordinated,[NREM.baseline(end,2) NREM.baseline(end,2)]);
                            TS.post.vRipples = Restrict(ripples.vHPC.coordinated,[NREM.reward(1,1) NREM.reward(1,1)]);
                        end
                        
                        
                            cond = logical(ones(1,size(patterns.reward.vHPC,2)));
                            [p , time] = triggered_average_Ripples(TS.pre.dRipples,patterns.reward.vHPC,cond,[Bins' SpksTrains.vHPC],[-1 1]);
                            Pre.vHPC.reward = [Pre.vHPC.reward , p]; clear p t
                            
                            cond = logical(ones(1,size(patterns.reward.vHPC,2)));
                            [p , time] = triggered_average_Ripples(TS.post.dRipples,patterns.reward.vHPC,cond,[Bins' SpksTrains.vHPC],[-1 1]);
                            Post.vHPC.reward = [Post.vHPC.reward , p]; clear p
                        
                            cond = logical(ones(1,size(patterns.reward.dHPC,2)));
                            [p , time] = triggered_average_Ripples(TS.pre.vRipples,patterns.reward.dHPC,cond,[Bins' SpksTrains.dHPC],[-1 1]);
                            Pre.dHPC.reward = [Pre.dHPC.reward , p]; clear p t
                            
                            cond = logical(ones(1,size(patterns.reward.dHPC,2)));
                            [p , time] = triggered_average_Ripples(TS.post.vRipples,patterns.reward.dHPC,cond,[Bins' SpksTrains.dHPC],[-1 1]);
                            Post.dHPC.reward = [Post.dHPC.reward , p]; clear p
                    end                    
                end
            end
            
        end
        disp(' ')
        clear A aversiveTS aversiveTS_run baselineTS rewardTS rewardTS_run
        clear behavior bins Cell_type_classification cellulartype cond
        clear is K Kinfo group_dHPC group_vHPC matrixC matrixD matrixV
        clear NREM REM WAKE segmentation tmp cond config
        clear spiketrains_dHPC spiketrains_vHPC opts MUA
        clear patterns Thresholded i  ii numberD numberV movement cross crossN
        clear Spikes bins Clusters Shocks_filt Rewards_filt config n_SU_D n_SU_V
        clear clusters coordinated coordinated_ripple_bursts coordinatedV
        clear cooridnated_event coordinatedV_refined coordinatedV_refined
        clear ripple_bursts ripple_event ripplesD ripplesV
        clear spks spks_dHPC spks_vHPC ripples cooridnated_event
        clear cooridnated_eventDV cooridnated_eventVD segments
    end
    clear num_assembliesA num_assembliesR
    
end

bins = [-1:0.01:1]
figure,
subplot(121),
plot(bins,nanmean(Pre.dHPC.aversive'),'k'),hold on
ciplot(nanmean(Pre.dHPC.aversive')-nansem(Pre.dHPC.aversive') , nanmean(Pre.dHPC.aversive')+nansem(Pre.dHPC.aversive'),bins,'k'), alpha 0.5
plot(bins,nanmean(Post.dHPC.aversive'),'r')
ciplot(nanmean(Post.dHPC.aversive')-nansem(Post.dHPC.aversive') , nanmean(Post.dHPC.aversive')+nansem(Post.dHPC.aversive'),bins,'r'), alpha 0.5

subplot(122),
plot(bins,nanmean(Pre.vHPC.aversive'),'k'),hold on
ciplot(nanmean(Pre.vHPC.aversive')-nansem(Pre.vHPC.aversive') , nanmean(Pre.vHPC.aversive')+nansem(Pre.vHPC.aversive'),bins,'k'), alpha 0.5
plot(bins,nanmean(Post.vHPC.aversive'),'r')
ciplot(nanmean(Post.vHPC.aversive')-nansem(Post.vHPC.aversive') , nanmean(Post.vHPC.aversive')+nansem(Post.vHPC.aversive'),bins,'r'), alpha 0.5


figure,
subplot(121),
plot(bins,nanmean(Pre.dHPC.reward'),'k'),hold on
ciplot(nanmean(Pre.dHPC.reward')-nansem(Pre.dHPC.reward') , nanmean(Pre.dHPC.reward')+nansem(Pre.dHPC.reward'),bins,'k'), alpha 0.5
plot(bins,nanmean(Post.dHPC.reward'),'b')
ciplot(nanmean(Post.dHPC.reward')-nansem(Post.dHPC.reward') , nanmean(Post.dHPC.reward')+nansem(Post.dHPC.reward'),bins,'b'), alpha 0.5

subplot(122),
plot(bins,nanmean(Pre.vHPC.reward'),'k'),hold on
ciplot(nanmean(Pre.vHPC.reward')-nansem(Pre.vHPC.reward') , nanmean(Pre.vHPC.reward')+nansem(Pre.vHPC.reward'),bins,'k'), alpha 0.5
plot(bins,nanmean(Post.vHPC.reward'),'b')
ciplot(nanmean(Post.vHPC.reward')-nansem(Post.vHPC.reward') , nanmean(Post.vHPC.reward')+nansem(Post.vHPC.reward'),bins,'b'), alpha 0.5


end


